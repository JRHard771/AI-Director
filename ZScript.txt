// Copyright (c) 2018 Joshua Hard. All rights reserved.
// This work is licensed under the terms of the MIT license.  
// To obtain a copy, visit <https://opensource.org/licenses/MIT>.

version "3.5"

class AIDSpawnPoint : Actor
{
	bool bUsedOnce;
	Default { +NOINTERACTION }
}

class AIDMonsterSpawnPoint : AIDSpawnPoint {}

class AIDItemSpawnPoint : AIDSpawnPoint {}

class AIDirector : EventHandler
{
	static const double[] AID_HITBOX = {1.0, 1.207107, 1.414214, 1.207107};

	bool randomizeItems;
	Array<AIDSpawnPoint> monster_spawns;
	Array<AIDSpawnPoint> item_spawns;
	Array<String> monster_roster;
	Array<String> item_roster;
	int timer;
	
	bool PercentChance(double chance)
	{
		return (frandom(0,99.999999) < chance);
	}
	
	double HealthFactor()
	{
		double totalHealth = 0;
		int numPlayers = 0;
		for (int i = 0; i < MAXPLAYERS; i++)
		{
			if (!playeringame[i]) continue;
			numPlayers++;
			totalHealth += players[i].mo.health;
			totalHealth += players[i].mo.CountInv('Armor') * 0.333333;
		}
		return (totalHealth / numPlayers) / 100.0;
	}
	
	bool PlayersSee(Actor this)
	{
		for (int i = 0; i < MAXPLAYERS; i++)
		{
			if (!playeringame[i]) continue;
			if (players[i].mo.CheckSight(this))
				return true;
		}
		return false;
	}
	
	void Nudge(Actor mo)
	{
		int hb = 0;
		for (double i = 0; i < 360.0; i += 22.5)
		{
			FLineTraceData ltdata;
			double length = mo.radius * AID_HITBOX[hb];
			hb++; if (hb > 3) hb = 0;
			mo.LineTrace(i,length,0,data:ltdata);
			if (ltdata.distance < length)
			{
				mo.SetOrigin(mo.pos - ltdata.HitDir * (length - ltdata.distance), false);
				mo.angle = i + frandom(135,225);
			}
			else if (mo.GetZAt(ltdata.HitLocation.x, ltdata.HitLocation.y, flags: GZF_ABSOLUTEPOS) < mo.floorz - 24)
			{
				mo.SetOrigin(mo.pos - ltdata.HitDir * length, false);
				mo.angle = i + frandom(135,225);
			}
		}
	}
	
	bool Spawn(class<Actor> type, AIDSpawnPoint spawnpoint, Vector2 offset, Actor player, double spawnangle)
	{
		Actor spawned = Actor.Spawn(type, spawnpoint.pos, ALLOW_REPLACE);
		if (spawned)
		{
			if (spawnpoint.bUsedOnce)
			{
				offset *= spawned.radius;
				Vector3 pos = (spawned.pos.xy + offset, spawned.pos.z);
				FLineTraceData ltdata;
				Vector2 lineVector = pos.xy - spawned.pos.xy;
				spawned.LineTrace(VectorAngle(lineVector.x, lineVector.y), lineVector.length(), 0, TRF_THRUACTORS, data:ltdata);
				Vector3 destination = (ltdata.HitDir).unit() * (ltdata.distance - 8.0) + spawned.pos;
				spawned.SetOrigin(destination,false);
				spawned.SetOrigin((spawned.pos.xy, spawned.floorz),false);
			}
			else
				spawnpoint.bUsedOnce = true;
			if (!spawned.TestMobjLocation() || spawned.height > spawned.ceilingz - spawned.floorz)
			{
				spawned.ClearCounters();
				spawned.Destroy();
				return false;
			}
			spawned.target = player;
			if (player && spawned.CheckIfTargetInLOS(360))
			{
				spawned.ClearCounters();
				spawned.Destroy();
				return false;
			}
			spawned.angle = spawnangle + frandom(-45,45);
			Nudge(spawned);
			spawned.bAMBUSH = spawnpoint.bAMBUSH;
			return true;
		}
		return false;
	}
	
	AIDSpawnPoint GetSpawnPoint(Actor player)
	{
		Array<AIDSpawnPoint> spawns;
		for (int i = 0; i < monster_spawns.size(); i++)
		{
			AIDSpawnPoint next = monster_spawns[i];
			double distance = player.Distance2D(next);
			double angle = (player.vel.length() > 1.0 ? VectorAngle(player.vel.x, player.vel.y) : player.angle);
			bool ahead = (aid_bootysnatchers ? true : (Actor.absangle(angle, player.AngleTo(next)) < 180));
			if (PlayersSee(next) || distance > aid_maxdistance || distance < aid_mindistance || !ahead) continue;
			spawns.push(next);
		}
		return (spawns.size() == 0 ? null : spawns[random(0, spawns.size()-1)]);
	}
	
	void SpawnGroupAt(AIDSpawnPoint spawnpoint, bool useMonsterRoster=true, Actor player=null)
	{
		if (!spawnpoint)
		{
			timer = 35;
			return;
		}
		int maxspawns = random(aid_mingroupsize,max(aid_mingroupsize, int(aid_maxgroupsize * HealthFactor() + 0.5)));
		
		timer = maxspawns * aid_spawnrate * 35;
		
		int maxfails = 10;
		for (int i = 0; i < maxspawns; i++)
		{
			FLineTraceData ltdata;
			int index;
			Vector2 offset = (random(-2, 2)*2, random(-2, 2)*2);
			if (useMonsterRoster)
			{
				index = random(0,monster_roster.size()-1);
				if (!Spawn(monster_roster[index], spawnpoint, offset, player, spawnpoint.angle))
				{
					maxfails--;
					if (maxfails == 0)
						break;
					else
						i--;
				}
			}
			else
			{
				index = random(0,item_roster.size()-1);
				if (!Spawn(item_roster[index], spawnpoint, offset, player, spawnpoint.angle))
				{
					maxfails--;
					if (maxfails == 0)
						break;
					else
						i--;
				}
			}
		}
	}
	
	override void OnRegister()
	{
		randomizeItems = (aid_randomammo || aid_randomarmor || aid_randomhealth
			|| aid_randompowerup || aid_randomweapon || aid_randomcustom);
		timer = 105;
//		if (aid_randomseed > -1)
//			SetRandomSeed[Director](aid_randomseed);
	}
	
	void AddToRoster(Actor thing)
	{
		if ((thing.bBoss && aid_saveboss) || (thing.bBossDeath && aid_saveboss == 2))
			return;
		let item = Inventory(thing);
		if (item)
		{
			if (item.owner) return;
			AIDItemSpawnPoint spawnpoint = AIDItemSpawnPoint(Actor.Spawn('AIDItemSpawnPoint', item.pos));
			spawnpoint.angle = item.angle;
			item_spawns.push(spawnpoint);
			item_roster.push(item.GetClassName());
			if (aid_enabled)
			{
				item.ClearCounters();
				item.Destroy();
			}
		}
		else
		{
			AIDMonsterSpawnPoint spawnpoint = AIDMonsterSpawnPoint(Actor.Spawn('AIDMonsterSpawnPoint', thing.pos));
			spawnpoint.angle = thing.angle;
			spawnpoint.bAMBUSH = thing.bAMBUSH;
			monster_spawns.push(spawnpoint);
			monster_roster.push(thing.GetClassName());
			if (aid_enabled)
			{
				thing.ClearCounters();
				thing.Destroy();
			}
		}
	}
	
	override void WorldThingSpawned(WorldEvent e)
	{
		if (level.time > 0) return;
		Actor mob = e.Thing;
		
		if (mob)
		{
			if (mob.bIsMonster)
				AddToRoster(mob);
			else if (randomizeItems)
			{
				if (aid_nobonuses && mob.bCountItem) return;
				
				if ((aid_randomammo && (Ammo(mob) || BackpackItem(mob))) ||
					(aid_randomarmor && (BasicArmorPickup(mob) || BasicArmorBonus(mob))) ||
					(aid_randomhealth && (Health(mob) || HealthPickup(mob))) ||
					(aid_randompowerup && (PowerupGiver(mob) || MapRevealer(mob))) ||
					(aid_randomweapon && Weapon(mob)) ||
					(aid_randomcustom && CustomInventory(mob)))
					
					AddToRoster(mob);
			}
		}
	}
	
	override void WorldTick()
	{
		if (!aid_enabled) return;
		if (level.time == 1)
		{
			int end = max(monster_spawns.size(), item_spawns.size());
			for (int i = 0; i < end; i++)
			{
				if (i < monster_spawns.size() && PercentChance(aid_startspawns))
					SpawnGroupAt(monster_spawns[i], player: (aid_surpriseparties ? null : players[0].mo));
				if (i < item_spawns.size() && PercentChance(aid_itemcount))
					SpawnGroupAt(item_spawns[i], false);
			}
			return;
		}
		else if (!aid_nocontinualspawns)
		{
			if (timer <= 0)
			{
				int pn = random(0,MAXPLAYERS-1);
				while (!playeringame[pn]) pn--;
				
				Actor player = players[pn].mo;
				AIDSpawnPoint spawnpoint = GetSpawnPoint(player);
				SpawnGroupAt(spawnpoint, player: player);
			}
			else if (aid_softenspawns && PercentChance(HealthFactor()*100.0))
				timer--;
		}
	}
}
